// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "src/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAlbumRepository is a mock of AlbumRepository interface.
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository.
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance.
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// GetAlbum mocks base method.
func (m *MockAlbumRepository) GetAlbum(id uint64) (*models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbum", id)
	ret0, _ := ret[0].(*models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbum indicates an expected call of GetAlbum.
func (mr *MockAlbumRepositoryMockRecorder) GetAlbum(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).GetAlbum), id)
}

// GetAllTracks mocks base method.
func (m *MockAlbumRepository) GetAllTracks(albumId uint64) ([]*models.TrackMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTracks", albumId)
	ret0, _ := ret[0].([]*models.TrackMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracks indicates an expected call of GetAllTracks.
func (mr *MockAlbumRepositoryMockRecorder) GetAllTracks(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracks", reflect.TypeOf((*MockAlbumRepository)(nil).GetAllTracks), albumId)
}
